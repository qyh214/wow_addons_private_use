<Ui xmlns="http://www.blizzard.com/wow/ui/" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.blizzard.com/wow/ui/
..\..\..\..\..\WoW\Data\Interface\AddOns\Blizzard_SharedXML\UI.xsd">
	<Script file="EventsTracker.lua"/>
		
	<Frame name="EventsTrackerHeader" hidden="true" movable="true" enableMouse="false" clampedToScreen="true" parent="UIParent">
		<Size x="15" y="46"/>
		<Layers>
			<Layer level="BACKGROUND">
				<Texture parentKey="Background" hidden="false" alpha="0.9" alphaMode="BLEND" atlas="TalkingHeads-TextBackground" useAtlasSize="true"/>
			</Layer>
		</Layers>
		<Frames>
			<Button parentKey="CollapsedButton" virtual="true" hidden="false">
				<Size x="13" y="13"/>
				<Anchors>
					<Anchor point="TOP" y="-4"/>
				</Anchors>
				<KeyValues>
					<KeyValue key="buttonType" value="module" type="string"/>
				</KeyValues>
				<NormalTexture atlas="CovenantSanctum-Renown-Arrow" useAtlasSize="true"/>
				<PushedTexture atlas="CovenantSanctum-Renown-Arrow" useAtlasSize="true"/>
				<Scripts>
					<OnLoad>
						self:GetPushedTexture():SetRotation(math.pi)
						--self:GetNormalTexture():SetDesaturated(true)
						self:RegisterForClicks("LeftButtonUp", "RightButtonUp", "AnyUp")
					</OnLoad>
					<OnEnter>
						GameTooltip:SetOwner(self, "ANCHOR_RIGHT", 30, 0)
						GameTooltip:AddLine(CreateAtlasMarkup("NPE_LeftClick", 18, 18).."- "..SLASH_TEXTTOSPEECH_DISABLED, 0, 1, 0.5, false)
						GameTooltip:Show();
					</OnEnter>
					<OnLeave>
						GameTooltip:Hide();
					</OnLeave>
					<OnClick>
						if button == "LeftButton" then
							--EventsTrackerFrame:SetCollapsed();
						end
					</OnClick>
				</Scripts>
			</Button>
			<Button parentKey="SetupButton" virtual="true" hidden="false">
				<Size x="10" y="10"/>
				<Anchors>
					<Anchor point="TOP" relativeKey="$parent.CollapsedButton" relativePoint="BOTTOM" x="0" y="0"/>
				</Anchors>
				<KeyValues>
					<KeyValue key="buttonType" value="module" type="string"/>
				</KeyValues>
				<NormalTexture file="interface/helpframe/helpicon-characterstuck.blp"/>
				<PushedTexture file="interface/helpframe/helpicon-characterstuck.blp"/>
				<Scripts>
					<OnLoad>
					self:GetNormalTexture():SetTexCoord(.2, .8, 0.2, 0.8)
					self:GetPushedTexture():SetTexCoord(.2, .8, 0.2, 0.8)
					self:GetPushedTexture():SetDesaturated(true)
					self:RegisterForClicks("LeftButtonUp", "RightButtonUp", "AnyUp")
					</OnLoad>
					<OnEnter>
					GameTooltip:SetOwner(self, "ANCHOR_RIGHT", 30, 0)
					
					GameTooltip:AddLine(CreateAtlasMarkup("NPE_LeftClick", 18, 18).."- "..BASE_SETTINGS.."\n"..CreateAtlasMarkup("NPE_RightClick", 18,18).."- "..EVENTS_LABEL.." "..SETTINGS, 0, 1, 0.5, false)
					GameTooltip:Show();
					</OnEnter>
					<OnLeave>
					GameTooltip:Hide();
					</OnLeave>
					<OnClick>
					-- je to moc zlozite a preto je to v lua
					</OnClick>
				</Scripts>
			</Button>
			<Frame name="SetupEventsTrackerFrame" inherits="ResizeLayoutFrame" hidden="true" enableMouse="true" frameStrata="TOOLTIP" mixin="SetupEventsTrackerMixin">
				<Size x="240" y="152"/>
				<Anchors>
					<Anchor point="TOPLEFT" relativeKey="$parent" relativePoint="BOTTOMLEFT" x="0" y="0"/>
				</Anchors>
				<Layers>
					<Layer level="TOOLTIP">
						<Texture parentKey="Background" hidden="false" alpha="1" alphaMode="BLEND" atlas="Ui-Dialog-New-Background" useAtlasSize="true"/>
					</Layer>
				</Layers>
				<Animations>
					<AnimationGroup parentKey="animIn">
						<Alpha fromAlpha="1" toAlpha="0" duration="0" order="1"/>
						<Alpha fromAlpha="0" toAlpha="1" duration="0.2" order="2"/>
					</AnimationGroup>
				</Animations>
				<Frames>
					<Frame parentKey="IconSizeLabel">
						<Size x="75" y="20"/>
						<Anchors>
							<Anchor point="TOPLEFT" relativeKey="$parent" relativePoint="TOPLEFT" x="8" y="-6"/>
						</Anchors>
						<Layers>
							<Layer level="ARTWORK">
								<FontString parentKey="Label" wordwrap="false" justifyH="LEFT" inherits="GameFontHighlightSmall"/>
							</Layer>
						</Layers>
						<Scripts>
							<OnShow>
							self.Label:SetText(HUD_EDIT_MODE_SETTING_ACTION_BAR_ICON_SIZE);
							</OnShow>
						</Scripts>
					</Frame>
					<Frame parentKey="IconSizeSlider" inherits="ResizeLayoutFrame" mixin="IconSizeSliderMixin">
						<Anchors>
							<Anchor point="LEFT" relativeKey="$parent.IconSizeLabel" relativePoint="RIGHT"/>
						</Anchors>
						<Frames>
							<Frame parentKey="Slider" inherits="MinimalSliderWithSteppersTemplate">
								<Size x="120" y="20"/>
								<Anchors>
									<Anchor point="LEFT"/>
								</Anchors>
							</Frame>
						</Frames>
						<Scripts>
							<OnLoad>
							CallbackRegistryMixin.OnLoad(self);
							self.cbrHandles = EventUtil.CreateCallbackHandleContainer();
							self.cbrHandles:RegisterCallback(self.Slider, MinimalSliderWithSteppersMixin.Event.OnValueChanged, self.OnSliderValueChanged, self);
							self.formatters = {};
							self.formatters[MinimalSliderWithSteppersMixin.Label.Right] = CreateMinimalSliderFormatter(MinimalSliderWithSteppersMixin.Label.Right);
							</OnLoad>
						</Scripts>
					</Frame>
					<Frame parentKey="IconSpaceLabel">
						<Size x="75" y="20"/>
						<Anchors>
							<Anchor point="TOPLEFT" relativeKey="$parent.IconSizeLabel" relativePoint="BOTTOMLEFT" x="0" y="0"/>
						</Anchors>
						<Layers>
							<Layer level="ARTWORK">
								<FontString parentKey="Label" wordwrap="false" justifyH="LEFT" inherits="GameFontHighlightSmall"/>
							</Layer>
						</Layers>
						<Scripts>
							<OnShow>
							self.Label:SetText(HUD_EDIT_MODE_SETTING_ACTION_BAR_ICON_PADDING);
							</OnShow>
						</Scripts>
					</Frame>
					<Frame parentKey="IconSpaceSlider" inherits="ResizeLayoutFrame" mixin="IconSpaceSliderMixin">
						<Anchors>
							<Anchor point="LEFT" relativeKey="$parent.IconSpaceLabel" relativePoint="RIGHT"/>
						</Anchors>
						<Frames>
							<Frame parentKey="Slider" inherits="MinimalSliderWithSteppersTemplate">
								<Size x="120" y="20"/>
								<Anchors>
									<Anchor point="LEFT"/>
								</Anchors>
							</Frame>
						</Frames>
						<Scripts>
							<OnLoad>
							CallbackRegistryMixin.OnLoad(self);
							self.cbrHandles = EventUtil.CreateCallbackHandleContainer();
							self.cbrHandles:RegisterCallback(self.Slider, MinimalSliderWithSteppersMixin.Event.OnValueChanged, self.OnSliderValueChanged, self);
							self.formatters = {};
							self.formatters[MinimalSliderWithSteppersMixin.Label.Right] = CreateMinimalSliderFormatter(MinimalSliderWithSteppersMixin.Label.Right);
							</OnLoad>
						</Scripts>
					</Frame>
					<Frame parentKey="IconsInRowLabel">
						<Size x="75" y="20"/>
						<Anchors>
							<Anchor point="TOPLEFT" relativeKey="$parent.IconSpaceLabel" relativePoint="BOTTOMLEFT" x="0" y="0"/>
						</Anchors>
						<Layers>
							<Layer level="ARTWORK">
								<FontString parentKey="Label" wordwrap="false" justifyH="LEFT" inherits="GameFontHighlightSmall"/>
							</Layer>
						</Layers>
						<Scripts>
							<OnShow>
							self.Label:SetText(HUD_EDIT_MODE_SETTING_ACTION_BAR_NUM_COLUMNS);
							</OnShow>
						</Scripts>
					</Frame>
					<Frame parentKey="IconsInRowSlider" inherits="ResizeLayoutFrame" mixin="IconsInRowSliderMixin">
						<Anchors>
							<Anchor point="LEFT" relativeKey="$parent.IconsInRowLabel" relativePoint="RIGHT"/>
						</Anchors>
						<Frames>
							<Frame parentKey="Slider" inherits="MinimalSliderWithSteppersTemplate">
								<Size x="120" y="20"/>
								<Anchors>
									<Anchor point="LEFT"/>
								</Anchors>
							</Frame>
						</Frames>
						<Scripts>
							<OnLoad>
							CallbackRegistryMixin.OnLoad(self);
							self.cbrHandles = EventUtil.CreateCallbackHandleContainer();
							self.cbrHandles:RegisterCallback(self.Slider, MinimalSliderWithSteppersMixin.Event.OnValueChanged, self.OnSliderValueChanged, self);
							self.formatters = {};
							self.formatters[MinimalSliderWithSteppersMixin.Label.Right] = CreateMinimalSliderFormatter(MinimalSliderWithSteppersMixin.Label.Right);
							</OnLoad>
						</Scripts>
					</Frame>
					<Frame parentKey="FontSizeLabel">
						<Size x="75" y="20"/>
						<Anchors>
							<Anchor point="TOPLEFT" relativeKey="$parent.IconsInRowLabel" relativePoint="BOTTOMLEFT" x="0" y="0"/>
						</Anchors>
						<Layers>
							<Layer level="ARTWORK">
								<FontString parentKey="Label" wordwrap="false" justifyH="LEFT" inherits="GameFontHighlightSmall"/>
							</Layer>
						</Layers>
						<Scripts>
							<OnShow>
							self.Label:SetText(FONT_SIZE);
							</OnShow>
						</Scripts>
					</Frame>
					<Frame parentKey="FontSizeSlider" inherits="ResizeLayoutFrame" mixin="FontSizeSliderMixin">
						<Anchors>
							<Anchor point="LEFT" relativeKey="$parent.FontSizeLabel" relativePoint="RIGHT"/>
						</Anchors>
						<Frames>
							<Frame parentKey="Slider" inherits="MinimalSliderWithSteppersTemplate">
								<Size x="120" y="20"/>
								<Anchors>
									<Anchor point="LEFT"/>
								</Anchors>
							</Frame>
						</Frames>
						<Scripts>
							<OnLoad>
							CallbackRegistryMixin.OnLoad(self);
							self.cbrHandles = EventUtil.CreateCallbackHandleContainer();
							self.cbrHandles:RegisterCallback(self.Slider, MinimalSliderWithSteppersMixin.Event.OnValueChanged, self.OnSliderValueChanged, self);
							self.formatters = {};
							self.formatters[MinimalSliderWithSteppersMixin.Label.Right] = CreateMinimalSliderFormatter(MinimalSliderWithSteppersMixin.Label.Right);
							</OnLoad>
						</Scripts>
					</Frame>
					<Frame parentKey="SpeakVolumeLabel">
						<Size x="75" y="20"/>
						<Anchors>
							<Anchor point="TOPLEFT" relativeKey="$parent.FontSizeLabel" relativePoint="BOTTOMLEFT" x="0" y="0"/>
						</Anchors>
						<Layers>
							<Layer level="ARTWORK">
								<FontString parentKey="Label" wordwrap="false" justifyH="LEFT" inherits="GameFontHighlightSmall"/>
							</Layer>
						</Layers>
						<Scripts>
							<OnShow>
							self.Label:SetText(TEXT_TO_SPEECH_ADJUST_VOLUME);
							</OnShow>
						</Scripts>
					</Frame>
					<Frame parentKey="SpeakVolumeSlider" inherits="ResizeLayoutFrame" mixin="SpeakVolumeSliderMixin">
						<Anchors>
							<Anchor point="LEFT" relativeKey="$parent.SpeakVolumeLabel" relativePoint="RIGHT"/>
						</Anchors>
						<Frames>
							<Frame parentKey="Slider" inherits="MinimalSliderWithSteppersTemplate">
								<Size x="120" y="20"/>
								<Anchors>
									<Anchor point="LEFT"/>
								</Anchors>
							</Frame>
						</Frames>
						<Scripts>
							<OnLoad>
							CallbackRegistryMixin.OnLoad(self);
							self.cbrHandles = EventUtil.CreateCallbackHandleContainer();
							self.cbrHandles:RegisterCallback(self.Slider, MinimalSliderWithSteppersMixin.Event.OnValueChanged, self.OnSliderValueChanged, self);
							self.formatters = {};
							self.formatters[MinimalSliderWithSteppersMixin.Label.Right] = CreateMinimalSliderFormatter(MinimalSliderWithSteppersMixin.Label.Right);
							</OnLoad>
						</Scripts>
					</Frame>
					<Frame parentKey="TimeBeforeLabel">
						<Size x="75" y="20"/>
						<Anchors>
							<Anchor point="TOPLEFT" relativeKey="$parent.SpeakVolumeLabel" relativePoint="BOTTOMLEFT" x="0" y="0"/>
						</Anchors>
						<Layers>
							<Layer level="ARTWORK">
								<FontString parentKey="Label" wordwrap="false" justifyH="LEFT" inherits="GameFontHighlightSmall"/>
							</Layer>
						</Layers>
						<Scripts>
							<OnShow>
							self.Label:SetText(PING_TYPE_WARNING.." "..TIME_LABEL);
							</OnShow>
						</Scripts>
					</Frame>
					<Frame parentKey="TimeBeforeSlider" inherits="ResizeLayoutFrame" mixin="TimeBeforeSliderMixin">
						<Anchors>
							<Anchor point="LEFT" relativeKey="$parent.TimeBeforeLabel" relativePoint="RIGHT"/>
						</Anchors>
						<Frames>
							<Frame parentKey="Slider" inherits="MinimalSliderWithSteppersTemplate">
								<Size x="120" y="20"/>
								<Anchors>
									<Anchor point="LEFT"/>
								</Anchors>
							</Frame>
						</Frames>
						<Scripts>
							<OnLoad>
							CallbackRegistryMixin.OnLoad(self);
							self.cbrHandles = EventUtil.CreateCallbackHandleContainer();
							self.cbrHandles:RegisterCallback(self.Slider, MinimalSliderWithSteppersMixin.Event.OnValueChanged, self.OnSliderValueChanged, self);
							self.formatters = {};
							self.formatters[MinimalSliderWithSteppersMixin.Label.Right] = CreateMinimalSliderFormatter(MinimalSliderWithSteppersMixin.Label.Right);
							</OnLoad>
						</Scripts>
					</Frame>
					<Frame parentKey="ExtendedTooltipCheckButton" inherits="ResizeCheckButtonBehaviorTemplate">
						<Size x="1" y="1"/>
						<Anchors>
							<Anchor point="TOPLEFT" relativeKey="$parent.TimeBeforeLabel" relativePoint="BOTTOMLEFT" x="0" y="-7"/>
						</Anchors>
						<Frames>
							<CheckButton parentKey="Button" inherits="UICheckButtonTemplate">
								<Size x="18" y="18"/>
								<Anchors>
									<Anchor point="LEFT" x="-2"/>
								</Anchors>
								<Scripts>
									<OnClick>
									self:GetParent():OnCheckButtonClick();
									</OnClick>
								</Scripts>
							</CheckButton>
						</Frames>
						<Layers>
							<Layer level="ARTWORK">
								<FontString parentKey="label" inherits="GameFontHighlightSmall">
									<Anchors>
										<Anchor point="LEFT" relativeKey="$parent.Button" relativePoint="RIGHT"/>
									</Anchors>
								</FontString>
							</Layer>
						</Layers>
						<Scripts>
							<OnShow>
							self.label:SetText(USE_UBERTOOLTIPS);
							</OnShow>
						</Scripts>
					</Frame>
				</Frames>
				<Scripts>
					<OnShow method="OnShow"/>
				</Scripts>
			</Frame>
		</Frames>
		<Scripts>
			<OnLoad>
			self:RegisterForDrag("LeftButton");
			</OnLoad>
			<OnDragStart>
			self:StartMoving();
			</OnDragStart>
			<OnDragStop>
			self:StopMovingOrSizing();
			EventsTrackerFrame:SavePosition(self:GetPoint(1))
			</OnDragStop>
		</Scripts>
	</Frame>
	<GameTooltip name="EventTooltip" frameStrata="TOOLTIP" hidden="true" parent="UIParent" inherits="SharedTooltipTemplate"/>
	<!-- ParagonReputation_Glow -->
	<Button name="EventsTrackerButton" registerForClicks="LeftButtonUp, RightButtonUp" virtual="true">
		<Size x="26" y="26"/>
		<Layers>
			<Layer level="ARTWORK">
				<Texture parentKey="icon">
					<Size x="32" y="32"/>
					<Anchors>
						<Anchor point="CENTER"/>
					</Anchors>
					<Animations>
						<AnimationGroup parentKey="Anim" looping="BOUNCE">
							<Alpha childKey="flash" fromAlpha="0.4" toAlpha="1" duration=".5" smoothing="IN"/>
							<Scripts>
								<OnPlay>
								self.loopCount = 12;
								</OnPlay>
								<OnLoop>
								self.loopCount = self.loopCount - 1;
								if self.loopCount == 0 then
									self:Stop();
								end
								</OnLoop>
							</Scripts>
						</AnimationGroup>
					</Animations>
				</Texture>
				<FontString parentKey="timer" inherits="GameFontNormalSmall" justifyH="CENTER">
					<Anchors>
						<Anchor point="TOP" relativeKey="$parent" relativePoint="BOTTOM" x="0" y="2"/>
					</Anchors>
					<Color r=".9" g=".9" b=".9"/>
				</FontString>
			</Layer>
			<Layer level="BACKGROUND" textureSubLevel="-1">
				<Texture parentKey="glow" hidden="false" alpha="1" alphaMode="BLEND" atlas="OBJFX_Glow" useAtlasSize="false">
					<Size x="56" y="56"/>
					<Anchors>
						<Anchor point="CENTER"/>
					</Anchors>
					<Color r="0" g="0" b="0"/>
				</Texture>
				<Texture parentKey="bg" hidden="false" alpha=".5" alphaMode="BLEND" atlas="TalkingHeads-TextBackground" useAtlasSize="false">
					<Size x="35" y="14"/>
					<Anchors>
						<Anchor point="CENTER" relativeKey="$parent.timer" relativePoint="CENTER" x="0" y="0"/>
					</Anchors>
				</Texture>
			</Layer>
		</Layers>
		<Scripts>
			<OnEnter>
			EventTooltip:SetOwner(self, "ANCHOR_BOTTOM", 0, -12);
			EventTooltip:AddLine(self.tooltipTitle, 0, 1, 0.5, false);

			local completeOnCurrentChar, extendedTooltip = EventsTrackerFrame:GetToolTipComplete(self.index)
			
			EventTooltip:AddLine(completeOnCurrentChar)
			
			if extendedTooltip ~= "" then
				EventTooltip:AddLine("\n"..extendedTooltip)
			end
			
			EventTooltip:AddLine("\n"..CreateAtlasMarkup("NPE_LeftClick", 18, 18).."- "..MAP_PIN_HYPERLINK.." "..CreateAtlasMarkup("NPE_LeftClick", 18, 18).."+"..SHIFT_KEY_TEXT.." - "..SHOW_MAP.."\n"..CreateAtlasMarkup("NPE_RightClick", 18, 18).."- "..CALENDAR_EDIT_EVENT, 1, 1, 0.5, false);
			
			local tooltiplines = EventTooltip:NumLines()
			for i = 1, tooltiplines do
				local lineL = _G["EventTooltipTextLeft"..i]
				local fontName, fontHeight, fontFlags = lineL:GetFont()
				if i == 1 then
					lineL:SetFont(fontName, 14)
				elseif i == tooltiplines then
					lineL:SetFont(fontName, 11)
				else
					lineL:SetFont(fontName, 10)
				end
			end
			--SharedTooltip_SetBackdropStyle(EventTooltip, {layoutType = "TooltipDefaultLayout"});	--"PerksProgramProductsPanelTemplate"
			EventTooltip:Show();
			</OnEnter>
			<OnLeave>
			EventTooltip:Hide();
			</OnLeave>
			<OnClick>
			if button == "LeftButton" and next(self.coor) then
				if not IsModifierKeyDown() then
					local _, addonLoaded = C_AddOns.IsAddOnLoaded("TomTom");
					if addonLoaded == false then
						C_Map.ClearUserWaypoint();
						C_Map.SetUserWaypoint(UiMapPoint.CreateFromCoordinates(self.coor[1], self.coor[2]/100, self.coor[3]/100, 0));
						C_SuperTrack.SetSuperTrackedUserWaypoint(true);
					else
						local default = EventsTrackerFrame:GetLinkToFullEvent(self.index);
						TomTom:AddWaypoint(self.coor[1], self.coor[2]/100, self.coor[3]/100, {title=self.tooltipTitle, from="EventTracker", crazy=true});
					end;
				else
					--OpenWorldMap(mapID)
					ToggleWorldMap();
					if WorldMapFrame:IsVisible() then 
						WorldMapFrame:SetMapID(self.coor[1]);
					end;
				end;
			elseif button == "RightButton" then
				local menuFrame = CreateFrame("Frame", "EventsMenuFrame", UIParent, "UIDropDownMenuTemplate");
				local v = EventsTrackerFrame:GetLinkToEvent(self.index);
				local default = EventsTrackerFrame:GetLinkToFullEvent(self.index);
				local timeBefore = EventsTrackerFrame:GetTimeBefore()
				local menu = {
					{ text = ENABLE,
						checked = function() return v.enable; end,
						tooltipOnButton = 1,
						tooltipTitle = default.eventName,
						tooltipText = DISABLE.." "..MAP_LEGEND_EVENT,
						func = function() v.enable = not v.enable; EventsTrackerFrame:ReloadAllEvents(); EventsTrackerFrame:SetPosition(); end;},
					{ text = SOUND,
						checked = function() return v.sound; end,
						keepShownOnClick = 1,
						tooltipOnButton = 1,
						tooltipTitle = default.eventName, --TEXT_TO_SPEECH_PLAY_SAMPLE SOUND  LOSS_OF_CONTROL_SECONDS ENABLE_REMOTE_TEXT_TO_SPEECH
						tooltipText = TEXT_TO_SPEECH_PLAY_SAMPLE,
						func = function() v.sound = not v.sound; end;},
					{ text = MAP_LEGEND_EVENT.." "..PING_TYPE_WARNING,
						checked = function() return v.voice_before; end,
						keepShownOnClick = 1,
						tooltipOnButton = 1,
						tooltipTitle = default.eventName,
						tooltipText = SLASH_TEXTTOSPEECH_HELP_SAMPLE.." "..timeBefore,
						func = function() v.voice_before = not v.voice_before; end;},
					{ text = MAP_LEGEND_EVENT.." "..START,
						checked = function() return v.voice_active; end,
						keepShownOnClick = 1,
						tooltipOnButton = 1,
						tooltipTitle = default.eventName,
						tooltipText = SLASH_TEXTTOSPEECH_HELP_SAMPLE,
						func = function() v.voice_active = not v.voice_active; end;},
					{ text = ANIMATION,
						checked = function() return v.anim; end,
						keepShownOnClick = 1,
						tooltipOnButton = 1,
						tooltipTitle = default.eventName,
						tooltipText = ANIMATION,
						func = function() v.anim = not v.anim; end;},
					{ text = CANCEL,
						notCheckable = true,
						func = function() UIDropDownMenu_DisableDropDown(menuFrame); end;},
				};
				EventsTrackerFrame:EasyMenu(menu, menuFrame, "cursor", 0 , 0, "MENU");
			end
			</OnClick>
		</Scripts>
	</Button>
	<ContainedAlertFrame name="EventsTrackerWarningTemplate" parent="UIParent" hidden="true" frameStrata="DIALOG" virtual="true" inherits="AlertFrameTemplate">
		<Size x="540" y="60"/>
		<Animations>
			<AnimationGroup parentKey="animIn">
				<Alpha fromAlpha="1" toAlpha="0" duration="0" order="1"/>
				<Alpha fromAlpha="0" toAlpha="1" duration="0.2" order="2"/>
			</AnimationGroup>
			<AnimationGroup parentKey="waitAndAnimOut">
				<Alpha startDelay="8" fromAlpha="1" toAlpha="0" duration="1.5" parentKey="animOut">
					<Scripts>
						<OnFinished>
						self:GetRegionParent():Hide();
						</OnFinished>
					</Scripts>
				</Alpha>
			</AnimationGroup>
		</Animations>
		<Layers>
			<Layer level="BACKGROUND">
				<Texture parentKey="Background" atlas="Ui-Dialog-New-Background" useAtlasSize="true" setAllPoints="true"/>
			</Layer>
			<Layer level="BORDER">
				<Texture parentKey="Icon" file="interface/dialogframe/ui-dialog-icon-alertnew.blp">
					<Size x="38" y="38"/>
					<Anchors>
						<Anchor point="LEFT" x="16" y="0"/>
					</Anchors>
				</Texture>
			</Layer>
			<Layer level="ARTWORK">
				<FontString parentKey="Text" inherits="GameFontHighlightLarge" justifyH="LEFT">
					<Anchors>
						<Anchor point="BOTTOMLEFT" relativeKey="$parent.Icon" relativePoint="BOTTOMRIGHT" x="10" y="7"/>
					</Anchors>
				</FontString>
			</Layer>
		</Layers>
		<Frames>
			<Frame setAllPoints="true" enableMouse="false" parentKey="glowFrame">
				<Layers>
					<Layer level="OVERLAY">
						<Texture atlas="Toast-Flash" useAtlasSize="true" alphaMode="ADD" hidden="true" parentKey="glow">
							<Animations>
								<AnimationGroup parentKey="animIn">
									<Alpha fromAlpha="0" toAlpha="1" duration="0.2" order="1"/>
									<Alpha fromAlpha="1" toAlpha="0" duration="0.5" order="2"/>
									<Scripts>
										<OnFinished>
										self:GetParent():Hide();
										</OnFinished>
									</Scripts>
								</AnimationGroup>
							</Animations>
						</Texture>
					</Layer>
				</Layers>
				<Scripts>
					<OnLoad function="RaiseFrameLevel"/>
				</Scripts>
			</Frame>
		</Frames>
		<Scripts>
			<OnLoad>
			self.glow = self.glowFrame.glow;
			</OnLoad>
		</Scripts>
	</ContainedAlertFrame>
</Ui>
